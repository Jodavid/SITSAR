// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dg0i
NumericVector dg0i(NumericVector x, double alpha, double gamma, double L);
RcppExport SEXP _SITSAR_dg0i(SEXP xSEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(dg0i(x, alpha, gamma, L));
    return rcpp_result_gen;
END_RCPP
}
// pg0i
arma::vec pg0i(const arma::vec& q, double alpha, double gamma, double L, double step);
RcppExport SEXP _SITSAR_pg0i(SEXP qSEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP LSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(pg0i(q, alpha, gamma, L, step));
    return rcpp_result_gen;
END_RCPP
}
// qg0i
NumericVector qg0i(NumericVector p, double alpha, double gamma, double L, double tol, double step);
RcppExport SEXP _SITSAR_qg0i(SEXP pSEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP LSEXP, SEXP tolSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(qg0i(p, alpha, gamma, L, tol, step));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SITSAR_dg0i", (DL_FUNC) &_SITSAR_dg0i, 4},
    {"_SITSAR_pg0i", (DL_FUNC) &_SITSAR_pg0i, 5},
    {"_SITSAR_qg0i", (DL_FUNC) &_SITSAR_qg0i, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_SITSAR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
